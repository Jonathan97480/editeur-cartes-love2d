#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SCRIPT DE COMMIT S√âCURIS√â - FONCTIONNALIT√â FAVORIS
=================================================
Script pour effectuer un commit s√©curis√© avec validations pr√©alables
"""

import os
import sys
import subprocess
import sqlite3
import json
from pathlib import Path
from datetime import datetime

class SecureCommit:
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.success_count = 0
        
    def log(self, message, level="INFO"):
        """Log avec timestamp."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        prefix = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ", 
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "CRITICAL": "üö®"
        }.get(level, "üìù")
        
        print(f"[{timestamp}] {prefix} {message}")
        
    def run_command(self, command, description):
        """Ex√©cute une commande shell de mani√®re s√©curis√©e."""
        self.log(f"Ex√©cution: {description}")
        try:
            result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=60)
            if result.returncode == 0:
                self.log(f"R√©ussi: {description}", "SUCCESS")
                return True, result.stdout.strip()
            else:
                error_msg = f"√âchec: {description} - {result.stderr.strip()}"
                self.log(error_msg, "ERROR")
                self.errors.append(error_msg)
                return False, result.stderr.strip()
        except subprocess.TimeoutExpired:
            error_msg = f"Timeout: {description}"
            self.log(error_msg, "ERROR")
            self.errors.append(error_msg)
            return False, "Timeout"
        except Exception as e:
            error_msg = f"Exception: {description} - {str(e)}"
            self.log(error_msg, "ERROR")
            self.errors.append(error_msg)
            return False, str(e)
    
    def validate_git_status(self):
        """Valide l'√©tat Git du projet."""
        self.log("üîç VALIDATION DE L'√âTAT GIT")
        
        # V√©rifier si on est dans un repo Git
        success, _ = self.run_command("git rev-parse --git-dir", "V√©rification repo Git")
        if not success:
            return False
            
        # V√©rifier l'√©tat des fichiers
        success, output = self.run_command("git status --porcelain", "√âtat des fichiers")
        if success:
            if output:
                modified_files = len(output.splitlines())
                self.log(f"Fichiers modifi√©s d√©tect√©s: {modified_files}")
                self.success_count += 1
            else:
                self.log("Aucune modification d√©tect√©e", "WARNING")
                self.warnings.append("Aucune modification √† commiter")
                
        return True
    
    def validate_database(self):
        """Valide la base de donn√©es."""
        self.log("üóÑÔ∏è VALIDATION DE LA BASE DE DONN√âES")
        
        db_path = "data/cartes.db"
        if not Path(db_path).exists():
            error_msg = "Base de donn√©es manquante"
            self.log(error_msg, "ERROR")
            self.errors.append(error_msg)
            return False
            
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            
            # V√©rifier la table favorites
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='formatting_favorites'")
            if cursor.fetchone():
                self.log("Table formatting_favorites pr√©sente", "SUCCESS")
                self.success_count += 1
            else:
                error_msg = "Table formatting_favorites manquante"
                self.log(error_msg, "ERROR")
                self.errors.append(error_msg)
                return False
                
            # V√©rifier la structure
            cursor.execute("PRAGMA table_info(formatting_favorites)")
            columns = cursor.fetchall()
            if len(columns) >= 25:
                self.log(f"Structure table correcte ({len(columns)} colonnes)", "SUCCESS")
                self.success_count += 1
            else:
                error_msg = f"Structure table incorrecte ({len(columns)} colonnes)"
                self.log(error_msg, "ERROR")
                self.errors.append(error_msg)
                return False
                
            conn.close()
            return True
            
        except Exception as e:
            error_msg = f"Erreur base de donn√©es: {str(e)}"
            self.log(error_msg, "ERROR")
            self.errors.append(error_msg)
            return False
    
    def run_tests(self):
        """Ex√©cute les tests de validation."""
        self.log("üß™ EX√âCUTION DES TESTS")
        
        # Test des favoris
        success, output = self.run_command(
            "python -m pytest tests/test_formatting_favorites.py -v --tb=short",
            "Tests des favoris"
        )
        
        if success:
            if "PASSED" in output and "FAILED" not in output:
                # Compter les tests pass√©s
                passed_count = output.count("PASSED")
                self.log(f"Tous les tests r√©ussis ({passed_count} tests)", "SUCCESS")
                self.success_count += 1
                return True
            else:
                error_msg = "Certains tests ont √©chou√©"
                self.log(error_msg, "ERROR")
                self.errors.append(error_msg)
                return False
        else:
            return False
    
    def validate_critical_files(self):
        """Valide la pr√©sence des fichiers critiques."""
        self.log("üìÅ VALIDATION DES FICHIERS CRITIQUES")
        
        critical_files = [
            "app_final.py",
            "lib/database.py", 
            "lib/favorites_manager.py",
            "lib/text_formatting_editor.py",
            "tests/test_formatting_favorites.py"
        ]
        
        missing_files = []
        for file_path in critical_files:
            if Path(file_path).exists():
                self.log(f"Fichier pr√©sent: {file_path}", "SUCCESS")
                self.success_count += 1
            else:
                missing_files.append(file_path)
                
        if missing_files:
            error_msg = f"Fichiers critiques manquants: {', '.join(missing_files)}"
            self.log(error_msg, "ERROR")
            self.errors.append(error_msg)
            return False
            
        return True
    
    def create_backup(self):
        """Cr√©e une sauvegarde avant commit."""
        self.log("üíæ CR√âATION DE SAUVEGARDE")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"backup_avant_commit_{timestamp}"
        
        # Cr√©er un stash Git
        success, _ = self.run_command(
            f"git stash push -m \"{backup_name}\"",
            "Cr√©ation stash de sauvegarde"
        )
        
        if success:
            self.log(f"Sauvegarde cr√©√©e: {backup_name}", "SUCCESS")
            self.success_count += 1
            return True
        else:
            self.log("Impossible de cr√©er la sauvegarde", "WARNING")
            self.warnings.append("Sauvegarde √©chou√©e")
            return False
    
    def add_files_to_git(self):
        """Ajoute les fichiers modifi√©s √† Git."""
        self.log("‚ûï AJOUT DES FICHIERS √Ä GIT")
        
        # Ajouter les fichiers de la fonctionnalit√© favoris
        files_to_add = [
            "lib/favorites_manager.py",
            "lib/database.py", 
            "lib/text_formatting_editor.py",
            "tests/test_formatting_favorites.py",
            "docs/",
            "RAPPORT_FINAL_COMMIT.md"
        ]
        
        for file_path in files_to_add:
            if Path(file_path).exists():
                success, _ = self.run_command(
                    f"git add {file_path}",
                    f"Ajout {file_path}"
                )
                if success:
                    self.success_count += 1
        
        # Ajouter les autres fichiers modifi√©s
        success, _ = self.run_command("git add .", "Ajout des autres modifications")
        return success
    
    def create_commit(self):
        """Cr√©e le commit avec un message structur√©."""
        self.log("üí¨ CR√âATION DU COMMIT")
        
        commit_message = """feat: Ajout de la fonctionnalit√© favoris de formatage

‚ú® Nouvelles fonctionnalit√©s:
- 4 boutons favoris dans l'√©diteur de formatage
- Sauvegarde rapide du formatage actuel  
- Chargement instantan√© des favoris 1, 2, 3
- Feedback visuel des √©tats (vert/rouge/normal)

üóÑÔ∏è Base de donn√©es:
- Table formatting_favorites avec 25 colonnes
- Migration automatique int√©gr√©e
- Validation des donn√©es robuste

üß™ Tests:
- 16 tests unitaires et d'int√©gration
- Couverture compl√®te de la fonctionnalit√©
- Validation de tous les cas d'usage

üìö Documentation:
- Guides d'impl√©mentation complets
- Documentation utilisateur
- Rapport d'audit valid√©

üîß Corrections:
- R√©solution des probl√®mes de lancement
- Optimisation de l'interface utilisateur
- Nettoyage du projet

Test√©: 16/16 tests passants
Valid√©: Audit complet r√©ussi 100%"""

        success, _ = self.run_command(
            f'git commit -m "{commit_message}"',
            "Cr√©ation du commit"
        )
        
        if success:
            self.log("Commit cr√©√© avec succ√®s", "SUCCESS")
            self.success_count += 1
            return True
        else:
            return False
    
    def show_commit_info(self):
        """Affiche les informations du commit."""
        self.log("üìä INFORMATIONS DU COMMIT")
        
        success, output = self.run_command("git log -1 --oneline", "Dernier commit")
        if success:
            self.log(f"Commit: {output}")
            
        success, output = self.run_command("git diff --stat HEAD~1", "Statistiques")
        if success:
            self.log("Statistiques des modifications:")
            for line in output.splitlines():
                if line.strip():
                    self.log(f"  {line}")
    
    def execute_secure_commit(self):
        """Ex√©cute le processus de commit s√©curis√© complet."""
        self.log("üöÄ D√âBUT DU COMMIT S√âCURIS√â")
        self.log("=" * 60)
        
        steps = [
            ("Validation Git", self.validate_git_status),
            ("Validation Base de Donn√©es", self.validate_database),
            ("Validation Fichiers Critiques", self.validate_critical_files),
            ("Ex√©cution Tests", self.run_tests),
            ("Cr√©ation Sauvegarde", self.create_backup),
            ("Ajout Fichiers Git", self.add_files_to_git),
            ("Cr√©ation Commit", self.create_commit)
        ]
        
        for step_name, step_func in steps:
            self.log(f"\nüîÑ {step_name}")
            success = step_func()
            
            if not success and step_name != "Cr√©ation Sauvegarde":
                self.log(f"‚ùå ARR√äT: √âchec √† l'√©tape {step_name}", "CRITICAL")
                return False
                
        # Affichage final
        self.show_commit_info()
        
        # R√©sum√©
        self.log("\n" + "=" * 60)
        self.log("üìä R√âSUM√â DU COMMIT S√âCURIS√â")
        self.log("=" * 60)
        self.log(f"‚úÖ Op√©rations r√©ussies: {self.success_count}")
        self.log(f"‚ùå Erreurs: {len(self.errors)}")
        self.log(f"‚ö†Ô∏è Avertissements: {len(self.warnings)}")
        
        if self.errors:
            self.log("\nüö® ERREURS:", "ERROR")
            for error in self.errors:
                self.log(f"  - {error}")
                
        if self.warnings:
            self.log("\n‚ö†Ô∏è AVERTISSEMENTS:", "WARNING")
            for warning in self.warnings:
                self.log(f"  - {warning}")
        
        if len(self.errors) == 0:
            self.log("\nüéâ COMMIT S√âCURIS√â R√âUSSI!", "SUCCESS")
            self.log("üìù La fonctionnalit√© favoris a √©t√© commit√©e avec succ√®s")
            return True
        else:
            self.log("\n‚ùå COMMIT S√âCURIS√â √âCHOU√â", "ERROR")
            return False

def main():
    """Point d'entr√©e principal."""
    try:
        commit_manager = SecureCommit()
        success = commit_manager.execute_secure_commit()
        
        if success:
            print("\nüéØ PROCHAINES √âTAPES RECOMMAND√âES:")
            print("   1. V√©rifier le commit: git log -1")
            print("   2. Pousser vers GitHub: git push origin main")
            print("   3. Cr√©er un tag: git tag v2.4.0-favoris")
            sys.exit(0)
        else:
            print("\nüí° ACTIONS CORRECTIVES:")
            print("   1. Corriger les erreurs list√©es")
            print("   2. Relancer le script de commit")
            print("   3. V√©rifier l'√©tat du projet")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Commit interrompu par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        print(f"\nüí• ERREUR FATALE: {str(e)}")
        sys.exit(2)

if __name__ == "__main__":
    main()
