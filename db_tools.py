#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Outils de diagnostic et maintenance de la base de donn√©es
"""
import argparse
import os
import sys
from pathlib import Path

# Configuration pour √©viter les probl√®mes d'encodage Unicode
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

# Ajouter le dossier parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent))

from lib.database_migration import (
    migrate_database, get_db_version, verify_database_integrity,
    get_table_schema, REQUIRED_SCHEMA, CURRENT_DB_VERSION
)
from lib.config import DB_FILE

def default_db_path():
    """Retourne le chemin par d√©faut de la base de donn√©es."""
    return str(Path(__file__).parent / DB_FILE)

def diagnose_database():
    """Diagnostic complet de la base de donn√©es."""
    print("üîç Diagnostic de la base de donn√©es")
    print("=" * 50)
    
    db_path = default_db_path()
    
    # V√©rifier l'existence
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e")
        return False
    
    print(f"üìÅ Fichier : {db_path}")
    print(f"üìä Taille : {os.path.getsize(db_path)} octets")
    
    # Version
    try:
        version = get_db_version(db_path)
        print(f"üìä Version : {version} (cible: {CURRENT_DB_VERSION})")
    except Exception as e:
        print(f"‚ùå Erreur lecture version : {e}")
        return False
    
    # Sch√©ma actuel
    try:
        schema = get_table_schema(db_path, "cards")
        print(f"üìã Colonnes pr√©sentes : {len(schema)}")
        
        missing_cols = []
        for col_name in REQUIRED_SCHEMA:
            if col_name not in schema:
                missing_cols.append(col_name)
        
        if missing_cols:
            print(f"‚ö†Ô∏è  Colonnes manquantes : {', '.join(missing_cols)}")
        else:
            print("‚úÖ Toutes les colonnes requises sont pr√©sentes")
            
    except Exception as e:
        print(f"‚ùå Erreur lecture sch√©ma : {e}")
        return False
    
    # Int√©grit√©
    try:
        integrity_ok = verify_database_integrity(db_path)
        if integrity_ok:
            print("‚úÖ Int√©grit√© v√©rifi√©e")
        else:
            print("‚ùå Probl√®me d'int√©grit√© d√©tect√©")
            return False
    except Exception as e:
        print(f"‚ùå Erreur v√©rification int√©grit√© : {e}")
        return False
    
    # Compter les cartes
    try:
        import sqlite3
        con = sqlite3.connect(db_path)
        cur = con.cursor()
        cur.execute("SELECT COUNT(*) FROM cards")
        count = cur.fetchone()[0]
        con.close()
        print(f"üìä Nombre de cartes : {count}")
    except Exception as e:
        print(f"‚ö†Ô∏è  Impossible de compter les cartes : {e}")
    
    print("\nüéâ Diagnostic termin√©")
    return True

def force_migration():
    """Force une migration compl√®te."""
    print("üîÑ Migration forc√©e de la base de donn√©es")
    print("=" * 50)
    
    db_path = default_db_path()
    
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e")
        return False
    
    try:
        success = migrate_database(db_path)
        if success:
            print("‚úÖ Migration forc√©e r√©ussie")
            return True
        else:
            print("‚ùå √âchec de la migration forc√©e")
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration : {e}")
        import traceback
        traceback.print_exc()
        return False

def backup_database():
    """Cr√©e une sauvegarde de la base de donn√©es."""
    print("üíæ Sauvegarde de la base de donn√©es")
    print("=" * 50)
    
    db_path = default_db_path()
    
    if not os.path.exists(db_path):
        print("‚ùå Base de donn√©es non trouv√©e")
        return False
    
    try:
        from datetime import datetime
        import shutil
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        # Cr√©er le dossier dbBackup s'il n'existe pas
        backup_dir = "dbBackup"
        os.makedirs(backup_dir, exist_ok=True)
        
        backup_filename = f"{os.path.basename(db_path)}.backup.manual.{timestamp}"
        backup_path = os.path.join(backup_dir, backup_filename)
        
        shutil.copy2(db_path, backup_path)
        print(f"‚úÖ Sauvegarde cr√©√©e : {backup_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la sauvegarde : {e}")
        return False

def main():
    """Point d'entr√©e principal."""
    parser = argparse.ArgumentParser(description="Outils de maintenance base de donn√©es")
    parser.add_argument('--diagnose', action='store_true', help='Diagnostic complet')
    parser.add_argument('--migrate', action='store_true', help='Migration forc√©e')
    parser.add_argument('--backup', action='store_true', help='Sauvegarde manuelle')
    parser.add_argument('--validate', action='store_true', help='Validation rapide int√©grit√©')
    parser.add_argument('--all', action='store_true', help='Ex√©cuter toutes les op√©rations')
    
    args = parser.parse_args()
    
    if not any([args.diagnose, args.migrate, args.backup, args.validate, args.all]):
        # Par d√©faut, faire un diagnostic
        args.diagnose = True
    
    success = True
    
    # Validation rapide pour les tests de s√©curit√©
    if args.validate:
        print("Validation rapide de la base de donnees...")
        try:
            if not os.path.exists(default_db_path()):
                print("Erreur: Base de donnees non trouvee")
                return False
            
            # Test de connexion basique
            import sqlite3
            conn = sqlite3.connect(default_db_path())
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
            table_count = cursor.fetchone()[0]
            conn.close()
            
            if table_count > 0:
                print(f"Succes: Base de donnees valide ({table_count} tables)")
                return True
            else:
                print("Erreur: Base de donnees vide ou corrompue")
                return False
                
        except Exception as e:
            print(f"Erreur validation: {e}")
            return False
    
    if args.all or args.backup:
        print()
        if not backup_database():
            success = False
    
    if args.all or args.diagnose:
        print()
        if not diagnose_database():
            success = False
    
    if args.all or args.migrate:
        print()
        if not force_migration():
            success = False
    
    return success

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚ùå Op√©ration interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue : {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
    
    print("\n" + "=" * 50)
    print("Appuyez sur Entr√©e pour fermer...")
    input()
