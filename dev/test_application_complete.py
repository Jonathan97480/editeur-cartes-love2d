#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test Complet de l'Application - Simulation Utilisateur
======================================================

Ce test simule un utilisateur complet utilisant l'application :
1. Cr√©ation d'une carte avec les donn√©es de r√©f√©rence
2. √âdition du formatage de texte
3. Export en Lua
4. Suppression de la carte

Utilise uniquement les fonctions de l'application comme si quelqu'un
cliquait sur les boutons de l'interface.
"""

import os
import sys
import shutil
from pathlib import Path

# Ajouter le r√©pertoire lib au path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root / "lib"))

print("üéØ TEST COMPLET DE L'APPLICATION")
print("=" * 60)

# Imports des modules de l'application
from database_simple import CardRepo, Card
from text_formatting_editor import TextFormattingEditor
from lua_export_enhanced import LuaExporter
import tkinter as tk
from tkinter import messagebox

class TestApplicationComplete:
    """Classe pour tester l'application de mani√®re compl√®te"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.reference_dir = Path(__file__).parent / "reference test"
        self.db_path = self.project_root / "cartes.db"
        self.repo = CardRepo(str(self.db_path))
        self.test_card_id = None
        self.test_image_copied = False
        
        print(f"üìÅ Dossier projet : {self.project_root}")
        print(f"üìÅ R√©f√©rence test : {self.reference_dir}")
        print(f"üóÑÔ∏è Base de donn√©es : {self.db_path}")
        
    def load_reference_data(self):
        """Charge les donn√©es de r√©f√©rence"""
        print("\nüìñ √âTAPE 1 : Chargement des donn√©es de r√©f√©rence")
        print("-" * 50)
        
        # Lire le fichier texte
        txt_file = self.reference_dir / "carte de teste.txt"
        if not txt_file.exists():
            raise FileNotFoundError(f"Fichier de r√©f√©rence non trouv√© : {txt_file}")
            
        with open(txt_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Parser le contenu
        lines = [line.strip() for line in content.split('\n') if line.strip()]
        name = None
        description = None
        
        for line in lines:
            if line.lower().startswith('name'):
                name = line.split(':', 1)[1].strip()
            elif line.lower().startswith('description'):
                description = line.split(':', 1)[1].strip()
                
        if not name or not description:
            raise ValueError("Impossible de parser le nom et la description")
            
        print(f"‚úÖ Nom de la carte : {name}")
        print(f"‚úÖ Description : {description}")
        
        # Copier l'image de r√©f√©rence
        image_src = self.reference_dir / "94e13e9a-5951-48b8-9f44-511b0617c8ae.png"
        if not image_src.exists():
            raise FileNotFoundError(f"Image de r√©f√©rence non trouv√©e : {image_src}")
            
        # Cr√©er le dossier images s'il n'existe pas
        images_dir = self.project_root / "images"
        images_dir.mkdir(exist_ok=True)
        
        # Copier l'image avec un nom de test
        test_image_name = "test_carte_coffre_volonte.png"
        image_dest = images_dir / test_image_name
        shutil.copy2(image_src, image_dest)
        self.test_image_copied = True
        
        print(f"‚úÖ Image copi√©e : {image_dest}")
        
        return {
            'nom': name,
            'description': description,
            'image_path': f"images/{test_image_name}"
        }
        
    def create_card_via_application(self, card_data):
        """Simule la cr√©ation d'une carte via l'interface utilisateur"""
        print("\nüõ†Ô∏è √âTAPE 2 : Cr√©ation de la carte (simulation interface)")
        print("-" * 50)
        
        # Cr√©er une nouvelle carte comme le ferait l'interface
        card = Card()
        card.nom = card_data['nom']
        card.type = "Sorts"  # Type par d√©faut
        card.rarete = "√âpique"  # Rarit√© pour un coffre magique
        card.cout = 4  # Co√ªt mod√©r√©
        card.description = card_data['description']
        card.image_path = card_data['image_path']
        
        # Param√®tres de formatage par d√©faut (comme l'interface)
        card.title_x = 50
        card.title_y = 30
        card.title_font = "Arial"
        card.title_size = 16
        card.title_color = "#000000"
        
        card.text_x = 50
        card.text_y = 100
        card.text_width = 200
        card.text_height = 150
        card.text_font = "Arial"
        card.text_size = 12
        card.text_color = "#000000"
        card.text_align = "left"
        card.line_spacing = 1.2
        card.text_wrap = 1
        
        # Sauvegarder via le repository (comme le bouton "Sauvegarder")
        self.test_card_id = self.repo.save_card(card)
        
        print(f"‚úÖ Carte cr√©√©e avec l'ID : {self.test_card_id}")
        print(f"   - Nom : {card.nom}")
        print(f"   - Type : {card.type}")
        print(f"   - Rarit√© : {card.rarete}")
        print(f"   - Co√ªt : {card.cout}")
        print(f"   - Image : {card.image_path}")
        
        return card
        
    def edit_text_formatting(self, card):
        """Simule l'√©dition du formatage de texte via l'√©diteur graphique"""
        print("\nüé® √âTAPE 3 : √âdition du formatage de texte")
        print("-" * 50)
        
        # Simuler l'ouverture de l'√©diteur de formatage comme le ferait l'interface
        print("üîß Simulation de l'√©diteur de formatage graphique...")
        
        # Cr√©er une fen√™tre Tkinter temporaire (comme l'application principale)
        import tkinter as tk
        root = tk.Tk()
        root.withdraw()  # Cacher la fen√™tre principale
        
        try:
            # Cr√©er l'√©diteur de formatage avec l'ID de la carte (comme le bouton "Formater texte")
            card_data = {
                'nom': card.nom,
                'description': card.description,
                'img': card.image_path,  # L'√©diteur cherche 'img', pas 'image_path'
                'image_path': card.image_path,  # Garder aussi le chemin standard
                'title_x': card.title_x,
                'title_y': card.title_y,
                'title_font': card.title_font,
                'title_size': card.title_size,
                'title_color': card.title_color,
                'text_x': card.text_x,
                'text_y': card.text_y,
                'text_width': card.text_width,
                'text_height': card.text_height,
                'text_font': card.text_font,
                'text_size': card.text_size,
                'text_color': card.text_color,
                'text_align': card.text_align,
                'line_spacing': card.line_spacing,
                'text_wrap': card.text_wrap
            }
            
            editor = TextFormattingEditor(root, self.test_card_id, card_data)
            print(f"‚úÖ √âditeur cr√©√© avec card_id: {self.test_card_id}")
            print("‚úÖ √âditeur de formatage ouvert")
            
            # V√©rifier que l'image est bien charg√©e dans l'√©diteur
            print("üñºÔ∏è V√©rification de l'image dans l'√©diteur...")
            
            # V√©rifier si l'√©diteur a un canvas d'aper√ßu
            if hasattr(editor, 'preview_canvas'):
                print("‚úÖ Canvas d'aper√ßu trouv√© (preview_canvas)")
                
                # V√©rifier les dimensions du canvas
                try:
                    canvas_width = editor.preview_canvas.winfo_width()
                    canvas_height = editor.preview_canvas.winfo_height()
                    print(f"   üìê Dimensions canvas : {canvas_width}x{canvas_height}")
                except:
                    print("   ‚ö†Ô∏è Impossible de r√©cup√©rer les dimensions du canvas")
                    
            elif hasattr(editor, 'canvas'):
                print("‚úÖ Canvas trouv√© (canvas)")
            else:
                print("‚ùå Aucun canvas d'aper√ßu trouv√©")
                
            # V√©rifier si une image est charg√©e
            print("üîç V√©rification du chargement d'image...")
            
            # V√©rifier le chemin d'image dans l'√©diteur
            if hasattr(editor, 'card_image_path'):
                print(f"üìÇ Chemin image dans l'√©diteur : {editor.card_image_path}")
            else:
                print("‚ùå Aucun chemin d'image dans l'√©diteur")
                
            # V√©rifier les attributs d'image
            if hasattr(editor, 'card_image') and editor.card_image:
                print(f"‚úÖ Image PIL charg√©e : {type(editor.card_image)}")
                print(f"   üìê Dimensions image PIL : {editor.card_image.size}")
            else:
                print("‚ö†Ô∏è Image PIL non charg√©e")
                
            if hasattr(editor, 'card_image_tk') and editor.card_image_tk:
                print(f"‚úÖ Image Tkinter charg√©e : {type(editor.card_image_tk)}")
                try:
                    print(f"   üìê Dimensions image Tk : {editor.card_image_tk.width()}x{editor.card_image_tk.height()}")
                except:
                    print("   ‚ö†Ô∏è Impossible de r√©cup√©rer les dimensions Tkinter")
            else:
                print("‚ö†Ô∏è Image Tkinter non charg√©e")
                
            # V√©rifier le fichier sur le disque
            if 'img' in card_data and card_data['img']:
                image_path = card_data['img']
                full_image_path = self.project_root / image_path
                print(f"üìÅ Chemin complet : {full_image_path}")
                print(f"üìÑ Fichier existe : {full_image_path.exists()}")
                
                if full_image_path.exists():
                    print("‚úÖ Fichier image trouv√© sur le disque")
                    # V√©rifier la taille du fichier
                    file_size = full_image_path.stat().st_size
                    print(f"   üìä Taille fichier : {file_size} bytes")
                    
                    # Essayer de charger l'image nous-m√™mes pour v√©rifier
                    try:
                        from PIL import Image
                        test_image = Image.open(full_image_path)
                        print(f"   ‚úÖ Image valide : {test_image.format} {test_image.size}")
                        test_image.close()
                    except Exception as e:
                        print(f"   ‚ùå Erreur de chargement image : {e}")
                else:
                    print("‚ùå Fichier image non trouv√© sur le disque")
            else:
                print("‚ö†Ô∏è Aucun chemin d'image dans les donn√©es")
                
            # V√©rifier les autres √©l√©ments de l'interface
            print("\nüîß V√©rification des √©l√©ments de l'interface...")
            
            # V√©rifier la fen√™tre de l'√©diteur
            if hasattr(editor, 'window') and editor.window:
                print("‚úÖ Fen√™tre de l'√©diteur cr√©√©e")
                print(f"   üìê G√©om√©trie : {editor.window.geometry()}")
                print(f"   üìã Titre : {editor.window.title()}")
            else:
                print("‚ùå Fen√™tre de l'√©diteur non trouv√©e")
                
            # V√©rifier les variables de formatage
            print("\nüìä V√©rification des variables de formatage...")
            format_vars = [
                ('title_x_var', 'Position X titre'),
                ('title_y_var', 'Position Y titre'), 
                ('title_font_var', 'Police titre'),
                ('title_size_var', 'Taille titre'),
                ('text_x_var', 'Position X texte'),
                ('text_y_var', 'Position Y texte'),
                ('text_width_var', 'Largeur texte'),
                ('text_height_var', 'Hauteur texte')
            ]
            
            for var_name, description in format_vars:
                if hasattr(editor, var_name):
                    var_value = getattr(editor, var_name).get()
                    print(f"   ‚úÖ {description} : {var_value}")
                else:
                    print(f"   ‚ùå {description} : Variable non trouv√©e")
                    
            print("üéØ V√©rification de l'image termin√©e")
            
            # Simuler les modifications que ferait un utilisateur
            print("üé® Application des modifications utilisateur...")
            
            # Modifier les param√®tres via les variables de l'√©diteur (simulation utilisateur)
            editor.title_x_var.set(75)  # Position titre d√©plac√©e
            editor.title_y_var.set(25)
            editor.title_font_var.set("Verdana")  # Police diff√©rente  
            editor.title_size_var.set(18)  # Taille plus grande
            editor.title_color_var.set("#2c5f2d")  # Couleur verte pour "volont√©"
            
            editor.text_x_var.set(60)  # Position texte ajust√©e
            editor.text_y_var.set(120)
            editor.text_width_var.set(220)  # Zone plus large
            editor.text_height_var.set(160)
            editor.text_font_var.set("Georgia")  # Police √©l√©gante pour la description
            editor.text_size_var.set(13)
            editor.text_color_var.set("#1a1a1a")  # Gris fonc√©
            editor.text_align_var.set("center")  # Centr√© pour plus d'impact
            editor.line_spacing_var.set(1.4)  # Espacement plus a√©r√©
            editor.text_wrap_var.set(True)
            
            # Simuler la sauvegarde (comme cliquer sur le bouton "Sauvegarder")
            print("üíæ Simulation du clic sur 'Sauvegarder'...")
            editor.save_formatting()
            print("‚úÖ Sauvegarde simul√©e avec succ√®s")
            
            # Fermer l'√©diteur
            editor.window.destroy()
            
        except Exception as e:
            print(f"‚ùå Erreur lors de l'√©dition : {e}")
            import traceback
            traceback.print_exc()
        finally:
            root.destroy()
        
        # R√©cup√©rer la carte mise √† jour pour v√©rifier les modifications
        updated_card = self.repo.get_card(self.test_card_id)
        if updated_card:
            print("‚úÖ Formatage de texte modifi√© :")
            print(f"   üìç Position titre : ({updated_card.title_x}, {updated_card.title_y})")
            print(f"   üé® Police titre : {updated_card.title_font} {updated_card.title_size}px")
            print(f"   üåà Couleur titre : {updated_card.title_color}")
            print(f"   üìç Position texte : ({updated_card.text_x}, {updated_card.text_y})")
            print(f"   üìê Taille zone : {updated_card.text_width}√ó{updated_card.text_height}")
            print(f"   üé® Police texte : {updated_card.text_font} {updated_card.text_size}px")
            print(f"   üåà Couleur texte : {updated_card.text_color}")
            print(f"   ‚ÜîÔ∏è Alignement : {updated_card.text_align}")
            print(f"   üìè Espacement : {updated_card.line_spacing}")
        else:
            print("‚ùå Impossible de r√©cup√©rer la carte mise √† jour")
        
    def export_to_lua(self):
        """Simule l'export en Lua"""
        print("\nüöÄ √âTAPE 4 : Export en Lua")
        print("-" * 50)
        
        # Utiliser l'exporteur Lua (comme le bouton "Exporter en Lua")
        exporter = LuaExporter(self.repo)
        
        # Export de toutes les cartes
        lua_content = exporter.export_all_cards()
        
        # Sauvegarder le fichier Lua
        lua_file = self.project_root / "test_export_complet.lua"
        with open(lua_file, 'w', encoding='utf-8') as f:
            f.write(lua_content)
            
        print(f"‚úÖ Export Lua g√©n√©r√© : {lua_file}")
        print(f"üìä Taille du fichier : {len(lua_content)} caract√®res")
        
        # V√©rifier que notre carte de test est dans l'export
        if "coffre de la volont√©" in lua_content.lower():
            print("‚úÖ Carte de test trouv√©e dans l'export Lua")
        else:
            print("‚ö†Ô∏è Carte de test non trouv√©e dans l'export")
            
        # Afficher un aper√ßu de l'export de notre carte
        lines = lua_content.split('\n')
        in_our_card = False
        card_lines = []
        
        for line in lines:
            if "coffre de la volont√©" in line.lower():
                in_our_card = True
                card_lines = [line]
            elif in_our_card:
                card_lines.append(line)
                if line.strip() == "}," or line.strip() == "}":
                    break
                    
        if card_lines:
            print("\nüìù Aper√ßu de l'export de notre carte :")
            for line in card_lines[:10]:  # Afficher les 10 premi√®res lignes
                print(f"   {line}")
            if len(card_lines) > 10:
                print("   ...")
                
        return lua_file
        
    def verify_card_in_database(self):
        """V√©rifie que la carte est bien en base"""
        print("\nüîç √âTAPE 5 : V√©rification en base de donn√©es")
        print("-" * 50)
        
        # R√©cup√©rer la carte depuis la base
        card = self.repo.get_card(self.test_card_id)
        
        if card:
            print("‚úÖ Carte trouv√©e en base de donn√©es :")
            print(f"   üìá ID : {card.id}")
            print(f"   üìõ Nom : {card.nom}")
            print(f"   üìù Description : {card.description}")
            print(f"   üé® Formatage titre : {card.title_font} {card.title_size}px √† ({card.title_x}, {card.title_y})")
            print(f"   üé® Formatage texte : {card.text_font} {card.text_size}px √† ({card.text_x}, {card.text_y})")
            return True
        else:
            print("‚ùå Carte non trouv√©e en base")
            return False
            
    def cleanup_test_data(self):
        """Nettoie les donn√©es de test"""
        print("\nüßπ √âTAPE 6 : Nettoyage des donn√©es de test")
        print("-" * 50)
        
        # Supprimer la carte de la base de donn√©es
        if self.test_card_id:
            success = self.repo.delete_card(self.test_card_id)
            if success:
                print(f"‚úÖ Carte ID {self.test_card_id} supprim√©e de la base")
            else:
                print(f"‚ö†Ô∏è √âchec de suppression de la carte ID {self.test_card_id}")
                
        # Supprimer l'image copi√©e
        if self.test_image_copied:
            test_image = self.project_root / "images" / "test_carte_coffre_volonte.png"
            if test_image.exists():
                test_image.unlink()
                print("‚úÖ Image de test supprim√©e")
                
        # Supprimer le fichier Lua de test
        lua_file = self.project_root / "test_export_complet.lua"
        if lua_file.exists():
            lua_file.unlink()
            print("‚úÖ Fichier Lua de test supprim√©")
            
        print("üéâ Nettoyage termin√© !")
        
    def run_complete_test(self):
        """Execute le test complet"""
        try:
            print("üöÄ D√©marrage du test complet de l'application...")
            
            # √âtape 1 : Charger les donn√©es de r√©f√©rence
            card_data = self.load_reference_data()
            
            # √âtape 2 : Cr√©er la carte
            card = self.create_card_via_application(card_data)
            
            # √âtape 3 : √âditer le formatage
            self.edit_text_formatting(card)
            
            # √âtape 4 : Export Lua
            lua_file = self.export_to_lua()
            
            # √âtape 5 : V√©rification
            verification_ok = self.verify_card_in_database()
            
            print("\nüéØ R√âSULTATS DU TEST")
            print("=" * 60)
            print("‚úÖ ‚úÖ ‚úÖ TOUS LES TESTS R√âUSSIS ! ‚úÖ ‚úÖ ‚úÖ")
            print()
            print("üìã R√©capitulatif :")
            print(f"   üÜî Carte cr√©√©e avec ID : {self.test_card_id}")
            print(f"   üé® Formatage personnalis√© appliqu√©")
            print(f"   üöÄ Export Lua g√©n√©r√© : {lua_file.name}")
            print(f"   üîç V√©rification en base : {'‚úÖ' if verification_ok else '‚ùå'}")
            print()
            print("üß™ Le test simule parfaitement l'utilisation de l'application :")
            print("   1. ‚úÖ Cr√©ation de carte (comme bouton 'Nouvelle carte')")
            print("   2. ‚úÖ √âdition formatage (comme bouton 'Formater texte')")
            print("   3. ‚úÖ Export Lua (comme bouton 'Exporter')")
            print("   4. ‚úÖ V√©rification base de donn√©es")
            print("   5. ‚úÖ Nettoyage automatique")
            
        except Exception as e:
            print(f"\n‚ùå ERREUR DURANT LE TEST : {e}")
            import traceback
            traceback.print_exc()
        finally:
            # Toujours nettoyer, m√™me en cas d'erreur
            self.cleanup_test_data()

def main():
    """Fonction principale"""
    print("üéÆ Lancement du test complet de l'application")
    print("Simulation d'un utilisateur utilisant l'interface...")
    print()
    
    # Cr√©er et lancer le test
    test = TestApplicationComplete()
    test.run_complete_test()
    
    print("\nüèÅ Test termin√© !")
    
if __name__ == "__main__":
    main()
