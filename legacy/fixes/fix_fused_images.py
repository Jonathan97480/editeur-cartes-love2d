#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de correction automatique des chemins d'images fusionn√©es
"""
import os
import sys
from pathlib import Path

# Ajouter le dossier parent au path pour les imports
sys.path.insert(0, str(Path(__file__).parent))

def fix_fused_image_paths():
    """Corrige automatiquement les chemins des images fusionn√©es en base."""
    print("üîß Correction automatique des chemins d'images fusionn√©es")
    print("=" * 60)
    
    try:
        from lib.database import CardRepo
        from lib.utils import ensure_images_subfolders, get_fused_card_image_path
        
        repo = CardRepo("cartes.db")
        cards = repo.list_cards()
        
        if not cards:
            print("   ‚ö†Ô∏è Aucune carte en base")
            return False
        
        subfolders = ensure_images_subfolders()
        cards_folder = subfolders['cards']
        
        print(f"üìÇ V√©rification du dossier : {cards_folder}")
        
        fixed_count = 0
        already_correct = 0
        no_fusion = 0
        
        for card in cards:
            if not card.img:
                continue
            
            # V√©rifier si la carte pointe d√©j√† vers une image fusionn√©e
            if "cards/" in card.img or cards_folder in card.img:
                already_correct += 1
                print(f"   ‚úÖ {card.name}: d√©j√† correct ({os.path.basename(card.img)})")
                continue
            
            # Chercher une image fusionn√©e pour cette carte
            fused_path = get_fused_card_image_path(card.name)
            
            if fused_path and os.path.exists(fused_path):
                # Mettre √† jour le chemin en base
                old_path = card.img
                card.img = fused_path.replace('\\', '/')
                repo.update(card)
                fixed_count += 1
                print(f"   üîß {card.name}: {os.path.basename(old_path)} ‚Üí {os.path.basename(fused_path)}")
            else:
                no_fusion += 1
                print(f"   ‚ÑπÔ∏è {card.name}: pas d'image fusionn√©e trouv√©e")
        
        print(f"\nüìä R√©sultats de la correction :")
        print(f"   Cartes corrig√©es : {fixed_count}")
        print(f"   D√©j√† correctes : {already_correct}")
        print(f"   Sans fusion : {no_fusion}")
        print(f"   Total trait√© : {len(cards)}")
        
        if fixed_count > 0:
            print(f"\nüéâ {fixed_count} cartes ont √©t√© corrig√©es !")
            print("   Au prochain red√©marrage, elles utiliseront les bonnes images.")
        elif already_correct > 0:
            print(f"\n‚úÖ Toutes les cartes utilisent d√©j√† les bonnes images")
        else:
            print(f"\n‚ö†Ô∏è Aucune image fusionn√©e trouv√©e")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la correction : {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Point d'entr√©e principal."""
    try:
        print("üöÄ CORRECTION AUTOMATIQUE DES IMAGES FUSIONN√âES")
        print("=" * 70)
        print("Ce script va corriger les chemins des images fusionn√©es en base de donn√©es.")
        print("Cela r√©sout le probl√®me : 'pas d'image' au red√©marrage de l'application.")
        print("")
        
        success = fix_fused_image_paths()
        
        print(f"\n{'='*70}")
        if success:
            print("‚úÖ Correction termin√©e avec succ√®s !")
            print("\nüìù Que fait cette correction :")
            print("   ‚Ä¢ D√©tecte les cartes qui ont des images fusionn√©es sur disque")
            print("   ‚Ä¢ Met √† jour leurs chemins en base pour pointer vers ces images")
            print("   ‚Ä¢ R√©sout le probl√®me de 'pas d'image' au red√©marrage")
            
            print("\nüîÆ √Ä l'avenir :")
            print("   ‚Ä¢ Les nouvelles cartes sauvegard√©es utiliseront automatiquement")
            print("     les bonnes images gr√¢ce √† la correction dans le code")
        else:
            print("‚ùå Erreur lors de la correction")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erreur inattendue : {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        success = main()
        print(f"\n{'='*70}")
        print("Appuyez sur Entr√©e pour fermer...")
        input()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ùå Correction interrompue")
        sys.exit(1)
