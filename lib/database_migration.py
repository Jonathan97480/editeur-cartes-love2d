#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Syst√®me de migration et de v√©rification de la base de donn√©es
"""
import json
import os
import sqlite3
from datetime import datetime
from typing import Dict, List, Any

# Pattern try/except pour imports relatifs/absolus
try:
    from .config import RARITY_VALUES
except ImportError:
    from config import RARITY_VALUES

# ======================= Constantes =======================

# Version actuelle de la base de donn√©es
CURRENT_DB_VERSION = 5

# Sch√©ma requis pour la table cards
REQUIRED_SCHEMA = {
    'id': 'INTEGER PRIMARY KEY AUTOINCREMENT',
    'side': 'TEXT NOT NULL CHECK(side IN (\'joueur\',\'ia\'))',
    'name': 'TEXT NOT NULL',
    'img': 'TEXT NOT NULL',
    'original_img': 'TEXT NOT NULL DEFAULT \'\'',
    'description': 'TEXT NOT NULL',
    'powerblow': 'INTEGER NOT NULL DEFAULT 0',
    'rarity': 'TEXT NOT NULL DEFAULT \'commun\'',
    'types_json': 'TEXT NOT NULL DEFAULT \'[]\'',
    'hero_json': 'TEXT NOT NULL',
    'enemy_json': 'TEXT NOT NULL',
    'action': 'TEXT NOT NULL',
    'action_param': 'TEXT NOT NULL DEFAULT \'\'',
    'created_at': 'TEXT NOT NULL',
    'updated_at': 'TEXT NOT NULL'
}

# ======================= Fonctions de migration =======================

def get_db_version(db_path: str) -> int:
    """R√©cup√®re la version actuelle de la base de donn√©es."""
    try:
        con = sqlite3.connect(db_path)
        cur = con.cursor()
        
        # V√©rifier si la table de version existe
        cur.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='db_version'
        """)
        
        if not cur.fetchone():
            # Pas de table de version, c'est une ancienne DB
            con.close()
            return 1
            
        cur.execute("SELECT version FROM db_version ORDER BY id DESC LIMIT 1")
        result = cur.fetchone()
        con.close()
        
        return result[0] if result else 1
        
    except Exception:
        return 1

def set_db_version(db_path: str, version: int) -> None:
    """Met √† jour la version de la base de donn√©es."""
    con = sqlite3.connect(db_path)
    cur = con.cursor()
    
    # Cr√©er la table de version si elle n'existe pas
    cur.execute("""
        CREATE TABLE IF NOT EXISTS db_version (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            version INTEGER NOT NULL,
            updated_at TEXT NOT NULL
        )
    """)
    
    # Ins√©rer la nouvelle version
    now = datetime.utcnow().isoformat()
    cur.execute(
        "INSERT INTO db_version (version, updated_at) VALUES (?, ?)",
        (version, now)
    )
    
    con.commit()
    con.close()

def get_table_schema(db_path: str, table_name: str) -> Dict[str, str]:
    """R√©cup√®re le sch√©ma actuel d'une table."""
    con = sqlite3.connect(db_path)
    cur = con.cursor()
    
    cur.execute(f"PRAGMA table_info({table_name})")
    columns = cur.fetchall()
    con.close()
    
    schema = {}
    for col in columns:
        col_name = col[1]
        col_type = col[2]
        not_null = col[3]
        default_value = col[4]
        is_pk = col[5]
        
        # Reconstruire la d√©finition de colonne
        definition = col_type
        if is_pk:
            definition += " PRIMARY KEY"
            if col_type == "INTEGER":
                definition += " AUTOINCREMENT"
        elif not_null:
            definition += " NOT NULL"
            if default_value is not None:
                if isinstance(default_value, str):
                    definition += f" DEFAULT '{default_value}'"
                else:
                    definition += f" DEFAULT {default_value}"
        
        schema[col_name] = definition
    
    return schema

def migrate_v1_to_v2(db_path: str) -> None:
    """Migration de la version 1 √† la version 2 - Ajout rarity et types_json."""
    print("üîÑ Migration v1 ‚Üí v2 : Ajout des colonnes rarity et types_json...")
    
    con = sqlite3.connect(db_path)
    cur = con.cursor()
    
    # V√©rifier les colonnes existantes
    cur.execute("PRAGMA table_info(cards)")
    existing_cols = [row[1] for row in cur.fetchall()]
    
    # Ajouter rarity si manquante
    if 'rarity' not in existing_cols:
        cur.execute("ALTER TABLE cards ADD COLUMN rarity TEXT NOT NULL DEFAULT 'commun'")
        print("   ‚úÖ Colonne 'rarity' ajout√©e")
    
    # Ajouter types_json si manquante
    if 'types_json' not in existing_cols:
        cur.execute("ALTER TABLE cards ADD COLUMN types_json TEXT NOT NULL DEFAULT '[]'")
        print("   ‚úÖ Colonne 'types_json' ajout√©e")
    
    con.commit()
    con.close()

def migrate_v2_to_v3(db_path: str) -> None:
    """Migration de la version 2 √† la version 3 - Validation et nettoyage des donn√©es."""
    print("üîÑ Migration v2 ‚Üí v3 : Validation et nettoyage des donn√©es...")
    
    con = sqlite3.connect(db_path)
    con.row_factory = sqlite3.Row
    cur = con.cursor()
    
    # R√©cup√©rer toutes les cartes
    cur.execute("SELECT * FROM cards")
    cards = cur.fetchall()
    
    fixed_count = 0
    
    for card in cards:
        card_id = card['id']
        updates = []
        params = []
        needs_update = False
        
        # V√©rifier et corriger la raret√©
        if card['rarity'] not in RARITY_VALUES:
            updates.append("rarity = ?")
            params.append('commun')
            needs_update = True
            print(f"   üîß Carte {card_id} '{card['name']}': raret√© '{card['rarity']}' ‚Üí 'commun'")
        
        # V√©rifier et corriger types_json
        try:
            types = json.loads(card['types_json'])
            if not isinstance(types, list):
                raise ValueError("types_json doit √™tre une liste")
        except (json.JSONDecodeError, ValueError):
            updates.append("types_json = ?")
            params.append('[]')
            needs_update = True
            print(f"   üîß Carte {card_id} '{card['name']}': types_json corrig√©")
        
        # V√©rifier et corriger hero_json
        try:
            hero = json.loads(card['hero_json'])
            if not isinstance(hero, dict):
                raise ValueError("hero_json doit √™tre un dictionnaire")
        except (json.JSONDecodeError, ValueError):
            default_hero = {
                "heal": 0, "shield": 0, "Epine": 0, "attack": 0,
                "AttackReduction": 0, "shield_pass": 0,
                "bleeding": {"value": 0, "number_turns": 0},
                "force_augmented": {"value": 0, "number_turns": 0},
                "chancePassedTour": 0, "energyCostIncrease": 0, "energyCostDecrease": 0
            }
            updates.append("hero_json = ?")
            params.append(json.dumps(default_hero, ensure_ascii=False))
            needs_update = True
            print(f"   üîß Carte {card_id} '{card['name']}': hero_json corrig√©")
        
        # V√©rifier et corriger enemy_json
        try:
            enemy = json.loads(card['enemy_json'])
            if not isinstance(enemy, dict):
                raise ValueError("enemy_json doit √™tre un dictionnaire")
        except (json.JSONDecodeError, ValueError):
            default_enemy = {
                "heal": 0, "shield": 0, "Epine": 0, "attack": 0,
                "AttackReduction": 0, "shield_pass": 0,
                "bleeding": {"value": 0, "number_turns": 0},
                "force_augmented": {"value": 0, "number_turns": 0},
                "chancePassedTour": 0, "energyCostIncrease": 0, "energyCostDecrease": 0
            }
            updates.append("enemy_json = ?")
            params.append(json.dumps(default_enemy, ensure_ascii=False))
            needs_update = True
            print(f"   üîß Carte {card_id} '{card['name']}': enemy_json corrig√©")
        
        # V√©rifier les timestamps
        if not card['created_at']:
            updates.append("created_at = ?")
            params.append(datetime.utcnow().isoformat())
            needs_update = True
        
        if not card['updated_at']:
            updates.append("updated_at = ?")
            params.append(datetime.utcnow().isoformat())
            needs_update = True
        
        # Appliquer les mises √† jour si n√©cessaire
        if needs_update:
            query = f"UPDATE cards SET {', '.join(updates)} WHERE id = ?"
            params.append(card_id)
            cur.execute(query, params)
            fixed_count += 1
    
    con.commit()
    con.close()
    
    if fixed_count > 0:
        print(f"   ‚úÖ {fixed_count} cartes corrig√©es")
    else:
        print("   ‚úÖ Toutes les donn√©es sont valides")

def migrate_v3_to_v4(db_path: str) -> None:
    """Migration de la version 3 √† la version 4 - Import automatique des templates configur√©s."""
    print("üîÑ Migration v3 ‚Üí v4 : Import automatique des templates configur√©s...")
    
    try:
        # Importer les modules n√©cessaires
        import os
        import shutil
        from .config import APP_SETTINGS, save_settings, load_settings
        from .utils import ensure_images_subfolders
        
        # Charger les param√®tres actuels
        load_settings()
        
        # R√©cup√©rer les templates configur√©s
        rarity_templates = APP_SETTINGS.get("rarity_templates", {})
        
        if not any(rarity_templates.values()):
            print("   ‚ÑπÔ∏è  Aucun template configur√©, migration ignor√©e")
            return
        
        # Cr√©er le dossier templates si n√©cessaire
        subfolders = ensure_images_subfolders()
        templates_folder = subfolders['templates']
        
        imported_count = 0
        updated_paths = {}
        
        for rarity, template_path in rarity_templates.items():
            if not template_path or not os.path.exists(template_path):
                print(f"   ‚ö†Ô∏è  Template {rarity} : fichier non trouv√© ({template_path})")
                continue
            
            # Construire le nouveau nom de fichier
            file_extension = os.path.splitext(template_path)[1]
            new_filename = f"template_{rarity}{file_extension}"
            new_path = os.path.join(templates_folder, new_filename)
            
            try:
                # Copier le fichier vers le dossier templates
                shutil.copy2(template_path, new_path)
                updated_paths[rarity] = new_path
                imported_count += 1
                print(f"   ‚úÖ Template {rarity} import√© : {new_filename}")
                
            except Exception as e:
                print(f"   ‚ùå Erreur import template {rarity} : {e}")
        
        # Mettre √† jour les param√®tres avec les nouveaux chemins
        if updated_paths:
            APP_SETTINGS["rarity_templates"].update(updated_paths)
            save_settings()
            print(f"   üìù Param√®tres mis √† jour avec {len(updated_paths)} nouveaux chemins")
        
        if imported_count > 0:
            print(f"   üéâ {imported_count} templates import√©s avec succ√®s")
        else:
            print("   ‚ö†Ô∏è  Aucun template n'a pu √™tre import√©")
            
    except ImportError as e:
        print(f"   ‚ö†Ô∏è  Erreur d'import, migration des templates ignor√©e : {e}")
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la migration des templates : {e}")
        import traceback
        traceback.print_exc()

def migrate_v4_to_v5(db_path: str) -> None:
    """Migration de la version 4 √† la version 5 - Ajout du champ original_img."""
    print("üîÑ Migration v4 ‚Üí v5 : Ajout du champ original_img...")
    
    con = sqlite3.connect(db_path)
    cur = con.cursor()
    
    try:
        # V√©rifier si la colonne original_img existe d√©j√†
        cur.execute("PRAGMA table_info(cards)")
        existing_columns = [row[1] for row in cur.fetchall()]
        
        if 'original_img' not in existing_columns:
            # Ajouter la colonne original_img
            cur.execute("ALTER TABLE cards ADD COLUMN original_img TEXT NOT NULL DEFAULT ''")
            
            # Initialiser original_img avec la valeur actuelle de img pour les cartes existantes
            cur.execute("UPDATE cards SET original_img = img WHERE original_img = ''")
            
            # Compter les cartes mises √† jour
            cur.execute("SELECT COUNT(*) FROM cards WHERE original_img != ''")
            updated_count = cur.fetchone()[0]
            
            con.commit()
            print(f"   ‚úÖ Colonne original_img ajout√©e et {updated_count} cartes initialis√©es")
        else:
            print("   ‚ÑπÔ∏è  Colonne original_img d√©j√† pr√©sente")
            
    except Exception as e:
        con.rollback()
        print(f"   ‚ùå Erreur lors de l'ajout de original_img : {e}")
        raise
    finally:
        con.close()

def verify_database_integrity(db_path: str) -> bool:
    """V√©rifie l'int√©grit√© de la base de donn√©es."""
    try:
        con = sqlite3.connect(db_path)
        cur = con.cursor()
        
        # V√©rification de l'int√©grit√© SQLite
        cur.execute("PRAGMA integrity_check")
        integrity_result = cur.fetchone()[0]
        
        if integrity_result != "ok":
            print(f"‚ùå √âchec de v√©rification d'int√©grit√© : {integrity_result}")
            con.close()
            return False
        
        # V√©rification du sch√©ma
        current_schema = get_table_schema(db_path, "cards")
        
        # V√©rifier que toutes les colonnes requises existent
        for col_name in REQUIRED_SCHEMA:
            if col_name not in current_schema:
                print(f"‚ùå Colonne manquante : {col_name}")
                con.close()
                return False
        
        con.close()
        try:
            print("‚úÖ Int√©grit√© de la base de donn√©es v√©rifi√©e")
        except UnicodeEncodeError:
            print("[SUCCESS] Integrite de la base de donnees verifiee")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification : {e}")
        return False

def migrate_database(db_path: str) -> bool:
    """Effectue toutes les migrations n√©cessaires."""
    print("üöÄ V√©rification et migration de la base de donn√©es...")
    
    try:
        current_version = get_db_version(db_path)
        print(f"üìä Version actuelle : {current_version}")
        print(f"üìä Version cible : {CURRENT_DB_VERSION}")
        
        if current_version == CURRENT_DB_VERSION:
            try:
                print("‚úÖ Base de donn√©es √† jour")
            except UnicodeEncodeError:
                print("[SUCCESS] Base de donnees a jour")
            return verify_database_integrity(db_path)
        
        # Sauvegarder la base avant migration
        # Cr√©er le dossier dbBackup s'il n'existe pas
        backup_dir = "dbBackup"
        os.makedirs(backup_dir, exist_ok=True)
        
        backup_filename = f"{os.path.basename(db_path)}.backup.{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        backup_path = os.path.join(backup_dir, backup_filename)
        import shutil
        shutil.copy2(db_path, backup_path)
        print(f"üíæ Sauvegarde cr√©√©e : {backup_path}")
        
        # Appliquer les migrations
        if current_version < 2:
            migrate_v1_to_v2(db_path)
            set_db_version(db_path, 2)
        
        if current_version < 3:
            migrate_v2_to_v3(db_path)
            set_db_version(db_path, 3)
        
        if current_version < 4:
            migrate_v3_to_v4(db_path)
            set_db_version(db_path, 4)
        
        if current_version < 5:
            migrate_v4_to_v5(db_path)
            set_db_version(db_path, 5)
        
        print(f"‚úÖ Migration termin√©e ! Version {current_version} ‚Üí {CURRENT_DB_VERSION}")
        
        # V√©rifier l'int√©grit√© apr√®s migration
        return verify_database_integrity(db_path)
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration : {e}")
        import traceback
        traceback.print_exc()
        return False

def ensure_db_with_migration(db_path: str) -> bool:
    """Assure que la base de donn√©es existe et est √† jour."""
    import os
    
    # Cr√©er la base si elle n'existe pas
    if not os.path.exists(db_path):
        try:
            print("üìÇ Cr√©ation de la nouvelle base de donn√©es...")
        except UnicodeEncodeError:
            print("[INFO] Creation de la nouvelle base de donnees...")
        con = sqlite3.connect(db_path)
        cur = con.cursor()
        
        # Cr√©er la table cards avec le sch√©ma complet
        columns_def = ", ".join([f"{name} {definition}" for name, definition in REQUIRED_SCHEMA.items()])
        cur.execute(f"CREATE TABLE cards ({columns_def})")
        
        con.commit()
        con.close()
        
        # Marquer comme version actuelle
        set_db_version(db_path, CURRENT_DB_VERSION)
        try:
            print("‚úÖ Base de donn√©es cr√©√©e avec le sch√©ma actuel")
        except UnicodeEncodeError:
            print("[SUCCESS] Base de donnees creee avec le schema actuel")
        return True
    
    # Migrer la base existante
    return migrate_database(db_path)
