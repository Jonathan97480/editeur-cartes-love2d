"""
Exporteur de package complet Love2D
Cr√©e un ZIP contenant toutes les ressources n√©cessaires pour le jeu
"""
import os
import zipfile
import shutil
from pathlib import Path
import json
from datetime import datetime

# Import de l'exporteur Love2D (ajuster le chemin selon la structure)
try:
    from lua_exporter_love2d import Love2DLuaExporter
except ImportError:
    # Fallback si le module n'est pas trouv√©
    Love2DLuaExporter = None

class GamePackageExporter:
    """Exporteur pour cr√©er des packages complets Love2D"""
    
    def __init__(self, repo, output_dir):
        """
        Initialise l'exporteur
        
        Args:
            repo: Repository des cartes
            output_dir: Dossier de sortie pour les packages
        """
        self.repo = repo
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # Dossiers sources
        self.base_dir = Path(__file__).parent
        self.images_dir = self.base_dir / "images"
        self.fonts_dir = self.base_dir / "fonts"
        
    def export_complete_package(self, package_name="love2d_cards_package"):
        """
        Exporte un package complet Love2D
        
        Args:
            package_name: Nom du package √† cr√©er
            
        Returns:
            str: Chemin vers le fichier ZIP cr√©√©
        """
        # Nom du fichier ZIP avec timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        zip_filename = f"{package_name}_{timestamp}.zip"
        zip_path = self.output_dir / zip_filename
        
        # Cr√©er le dossier temporaire
        temp_dir = self.output_dir / f"temp_{timestamp}"
        temp_dir.mkdir(exist_ok=True)
        
        try:
            # 1. Exporter les cartes au format Lua
            self._export_cards_lua(temp_dir)
            
            # 2. Copier les images
            self._copy_images(temp_dir)
            
            # 3. Copier les polices
            self._copy_fonts(temp_dir)
            
            # 4. Cr√©er la documentation
            self._create_documentation(temp_dir)
            
            # 5. Cr√©er le fichier ZIP
            self._create_zip_package(temp_dir, zip_path)
            
            return str(zip_path)
            
        finally:
            # Nettoyer le dossier temporaire
            if temp_dir.exists():
                shutil.rmtree(temp_dir)
    
    def _export_cards_lua(self, temp_dir):
        """Exporte les cartes au format Lua"""
        temp_dir = Path(temp_dir)  # Convertir en Path si n√©cessaire
        cards_dir = temp_dir / "cards"
        cards_dir.mkdir(exist_ok=True)
        
        # V√©rifier que l'exporteur est disponible
        if Love2DLuaExporter is None:
            raise ImportError("L'exporteur Love2D n'est pas disponible. V√©rifiez que lua_exporter_love2d.py existe.")
        
        # Utiliser l'exporteur Love2D avec formatage
        exporter = Love2DLuaExporter(self.repo)
        
        # Export des cartes joueur (utiliser la bonne m√©thode)
        lua_content = exporter.export_all_cards_love2d()
        lua_file = cards_dir / "cards_joueur.lua"
        
        with open(lua_file, 'w', encoding='utf-8') as f:
            f.write(lua_content)
        
        print(f"‚úÖ Cartes export√©es: {lua_file}")
    
    def _copy_images(self, temp_dir):
        """Copie les images de cartes"""
        temp_dir = Path(temp_dir)  # Convertir en Path si n√©cessaire
        images_dest = temp_dir / "images"
        
        if self.images_dir.exists():
            shutil.copytree(self.images_dir, images_dest, dirs_exist_ok=True)
            print(f"‚úÖ Images copi√©es: {images_dest}")
        else:
            images_dest.mkdir(exist_ok=True)
            print("‚ö†Ô∏è Dossier images non trouv√©, dossier vide cr√©√©")
    
    def _copy_fonts(self, temp_dir):
        """Copie les polices"""
        temp_dir = Path(temp_dir)  # Convertir en Path si n√©cessaire
        fonts_dest = temp_dir / "fonts"
        
        if self.fonts_dir.exists():
            shutil.copytree(self.fonts_dir, fonts_dest, dirs_exist_ok=True)
            print(f"‚úÖ Polices copi√©es: {fonts_dest}")
        else:
            fonts_dest.mkdir(exist_ok=True)
            print("‚ö†Ô∏è Dossier fonts non trouv√©, dossier vide cr√©√©")
    
    def _create_documentation(self, temp_dir):
        """Cr√©e la documentation du package"""
        temp_dir = Path(temp_dir)  # Convertir en Path si n√©cessaire
        docs_dir = temp_dir / "docs"
        docs_dir.mkdir(exist_ok=True)
        
        # README principal
        readme_content = self._generate_readme()
        with open(docs_dir / "README.md", 'w', encoding='utf-8') as f:
            f.write(readme_content)
        
        # Configuration Love2D
        love_config = self._generate_love_config()
        with open(temp_dir / "conf.lua", 'w', encoding='utf-8') as f:
            f.write(love_config)
        
        # Exemple d'int√©gration
        example_code = self._generate_example_code()
        with open(docs_dir / "example_integration.lua", 'w', encoding='utf-8') as f:
            f.write(example_code)
        
        print(f"‚úÖ Documentation cr√©√©e: {docs_dir}")
    
    def _generate_readme(self):
        """G√©n√®re le contenu du README"""
        cards = self.repo.list_cards()
        card_count = len(cards)
        
        return f"""# Package Love2D - √âditeur de Cartes

## üì¶ Contenu du Package

Ce package contient toutes les ressources n√©cessaires pour int√©grer vos cartes dans un jeu Love2D.

### üéÆ Cartes
- **{card_count} cartes** export√©es avec formatage complet
- Donn√©es Love2D natives (positions, polices, couleurs)
- Syst√®me d'effets et d'actions inclus

### üñºÔ∏è Images
- Images de cartes optimis√©es
- Format PNG haute qualit√©
- Dimensions standardis√©es Love2D (280x392px)

### üî§ Polices
- Polices syst√®me et personnalis√©es
- Compatibilit√© Love2D garantie

## üöÄ Installation

1. Extractez ce package dans votre projet Love2D
2. Incluez le fichier `cards/cards_joueur.lua` dans votre code
3. Utilisez les exemples fournis dans `docs/`

## üìñ Documentation

- `docs/example_integration.lua` - Exemple d'int√©gration
- `conf.lua` - Configuration Love2D recommand√©e

## ‚ú® Fonctionnalit√©s

- ‚úÖ Formatage de texte pr√©cis
- ‚úÖ Positionnement Love2D natif
- ‚úÖ Syst√®me d'effets complet
- ‚úÖ Documentation compl√®te
- ‚úÖ Pr√™t √† utiliser

## üõ†Ô∏è Support

G√©n√©r√© par l'√âditeur de Cartes Love2D
Date: {datetime.now().strftime("%d/%m/%Y √† %H:%M")}

Bon d√©veloppement ! üéÆ
"""
    
    def _generate_love_config(self):
        """G√©n√®re la configuration Love2D"""
        return """function love.conf(t)
    t.title = "Mon Jeu de Cartes"
    t.author = "Cr√©√© avec l'√âditeur de Cartes Love2D"
    t.version = "11.4"
    t.console = false
    
    -- Fen√™tre
    t.window.width = 1024
    t.window.height = 768
    t.window.resizable = true
    t.window.minwidth = 800
    t.window.minheight = 600
    
    -- Modules n√©cessaires pour les cartes
    t.modules.joystick = true
    t.modules.audio = true
    t.modules.keyboard = true
    t.modules.mouse = true
    t.modules.timer = true
    t.modules.image = true
    t.modules.graphics = true
    t.modules.font = true
end
"""
    
    def _generate_example_code(self):
        """G√©n√®re un exemple d'int√©gration"""
        return """-- Exemple d'int√©gration des cartes dans Love2D

-- Charger les cartes
local cards = require("cards.cards_joueur")

function love.load()
    -- Initialiser le syst√®me de cartes
    print("Cartes charg√©es:", #cards)
    
    -- Exemple: afficher une carte
    current_card = cards[1]
    
    -- Charger les polices n√©cessaires
    font_title = love.graphics.newFont(current_card.TextFormatting.title.size)
    font_text = love.graphics.newFont(current_card.TextFormatting.text.size)
    
    -- Charger l'image de la carte
    if current_card.ImgIlustration then
        card_image = love.graphics.newImage(current_card.ImgIlustration)
    end
end

function love.draw()
    if not current_card then return end
    
    local formatting = current_card.TextFormatting
    
    -- Dessiner l'image de la carte
    if card_image then
        love.graphics.draw(card_image, 100, 100)
    end
    
    -- Dessiner le titre
    love.graphics.setColor(1, 1, 1, 1) -- Blanc
    love.graphics.setFont(font_title)
    love.graphics.print(current_card.name, 
                       100 + formatting.title.x, 
                       100 + formatting.title.y)
    
    -- Dessiner la description
    love.graphics.setFont(font_text)
    love.graphics.printf(current_card.Description,
                        100 + formatting.text.x,
                        100 + formatting.text.y,
                        formatting.text.width,
                        formatting.text.align)
    
    -- Dessiner le co√ªt en √©nergie
    love.graphics.print(tostring(current_card.PowerBlow),
                       100 + formatting.energy.x,
                       100 + formatting.energy.y)
end

function love.keypressed(key)
    -- Changer de carte avec les fl√®ches
    if key == "right" then
        local current_index = 1
        for i, card in ipairs(cards) do
            if card == current_card then
                current_index = i
                break
            end
        end
        
        current_index = current_index + 1
        if current_index > #cards then
            current_index = 1
        end
        
        current_card = cards[current_index]
        
        -- Recharger l'image
        if current_card.ImgIlustration then
            card_image = love.graphics.newImage(current_card.ImgIlustration)
        end
    end
end
"""
    
    def _create_zip_package(self, temp_dir, zip_path):
        """Cr√©e le fichier ZIP final"""
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for root, dirs, files in os.walk(temp_dir):
                for file in files:
                    file_path = Path(root) / file
                    arcname = file_path.relative_to(temp_dir)
                    zipf.write(file_path, arcname)
        
        print(f"‚úÖ Package cr√©√©: {zip_path}")
