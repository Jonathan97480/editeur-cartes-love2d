#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ TEST COMPLET DU SYST√àME D'ACTEURS
"""
# Configurer l'environnement de test
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

from lib.database import CardRepo, ensure_db, Card
from lib.actors import ActorManager, export_lua_for_actor
from lib.config import DB_FILE
import tempfile
import os

def test_actors_system():
    """Test complet du syst√®me d'acteurs."""
    print("üß™ TEST COMPLET DU SYST√àME D'ACTEURS")
    print("=" * 50)
    
    # Utiliser une base de donn√©es temporaire pour les tests
    with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
        test_db = tmp.name
    
    try:
        # 1. Initialiser la base et cr√©er quelques cartes de test
        print("\n1Ô∏è‚É£ Initialisation de la base de donn√©es...")
        ensure_db(test_db)
        repo = CardRepo(test_db)
        
        # Cr√©er des cartes de test
        cards_data = [
            ("√âp√©e L√©gendaire", "Arme puissante du h√©ros", "joueur", "legendaire"),
            ("Boule de Feu", "Sort d'attaque magique", "joueur", "rare"),
            ("Griffure Sauvage", "Attaque de base de l'ennemi", "ia", "commun"),
            ("Bouclier Magique", "Protection contre la magie", "joueur", "rare"),
            ("Invocation Dragon", "Cr√©ature puissante", "ia", "mythique")
        ]
        
        created_cards = []
        for name, desc, side, rarity in cards_data:
            card = Card()
            card.name = name
            card.description = desc
            card.side = side
            card.rarity = rarity
            card.powerblow = 5
            card.types = ["attaque" if "attaque" in desc.lower() else "defense"]
            card_id = repo.insert(card)
            created_cards.append(card_id)
            print(f"   ‚úÖ Carte cr√©√©e : {name} (ID: {card_id})")
        
        # 2. Initialiser le syst√®me d'acteurs
        print("\n2Ô∏è‚É£ Initialisation du syst√®me d'acteurs...")
        actor_manager = ActorManager(test_db)
        
        # 3. Cr√©er des acteurs personnalis√©s
        print("\n3Ô∏è‚É£ Cr√©ation d'acteurs personnalis√©s...")
        custom_actors = [
            ("H√©ros Principal", "Le personnage principal du jeu", "#4CAF50", "‚öîÔ∏è"),
            ("Dragon Boss", "Boss final du donjon", "#F44336", "üê≤"),
            ("Mage Noir", "Antagoniste magique", "#9C27B0", "üßô‚Äç‚ôÇÔ∏è"),
            ("Marchand", "Vendeur d'objets", "#FF9800", "üõí")
        ]
        
        actor_ids = {}
        for name, desc, color, icon in custom_actors:
            actor_id = actor_manager.create_actor(name, desc, color, icon)
            actor_ids[name] = actor_id
            print(f"   ‚úÖ Acteur cr√©√© : {icon} {name} (ID: {actor_id})")
        
        # 4. Lier les cartes aux acteurs
        print("\n4Ô∏è‚É£ Liaison des cartes aux acteurs...")
        
        # R√©cup√©rer les cartes cr√©√©es
        all_cards = repo.list_cards()
        
        # Logique de liaison intelligente
        for card in all_cards:
            if "√©p√©e" in card.name.lower() or "bouclier" in card.name.lower():
                actor_manager.link_card_to_actor(card.id, actor_ids["H√©ros Principal"])
                print(f"   üîó {card.name} ‚Üí H√©ros Principal")
                
            elif "dragon" in card.name.lower():
                actor_manager.link_card_to_actor(card.id, actor_ids["Dragon Boss"])
                print(f"   üîó {card.name} ‚Üí Dragon Boss")
                
            elif "magique" in card.description.lower() or "boule de feu" in card.name.lower():
                actor_manager.link_card_to_actor(card.id, actor_ids["Mage Noir"])
                print(f"   üîó {card.name} ‚Üí Mage Noir")
                
            else:
                # Liaisons par d√©faut selon l'ancien syst√®me
                if card.side == "joueur":
                    actor_manager.link_card_to_actor(card.id, actor_ids["H√©ros Principal"])
                    print(f"   üîó {card.name} ‚Üí H√©ros Principal (d√©faut joueur)")
                elif card.side == "ia":
                    actor_manager.link_card_to_actor(card.id, actor_ids["Dragon Boss"])
                    print(f"   üîó {card.name} ‚Üí Dragon Boss (d√©faut IA)")
        
        # 5. Tester les exports par acteur
        print("\n5Ô∏è‚É£ Test des exports par acteur...")
        
        export_results = []
        for actor_name, actor_id in actor_ids.items():
            cards = actor_manager.get_actor_cards(actor_id)
            if cards:
                filename = f"test_cards_{actor_name.lower().replace(' ', '_')}.lua"
                export_lua_for_actor(repo, actor_manager, actor_id, filename)
                
                # V√©rifier le fichier cr√©√©
                if os.path.exists(filename):
                    with open(filename, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    export_results.append({
                        'actor': actor_name,
                        'cards_count': len(cards),
                        'filename': filename,
                        'file_size': len(content)
                    })
                    
                    print(f"   ‚úÖ Export {actor_name} : {len(cards)} cartes ‚Üí {filename} ({len(content)} chars)")
                    
                    # Nettoyer le fichier de test
                    os.remove(filename)
                else:
                    print(f"   ‚ùå √âchec export {actor_name}")
            else:
                print(f"   ‚ö†Ô∏è  {actor_name} : Aucune carte li√©e")
        
        # 6. Statistiques finales
        print("\n6Ô∏è‚É£ Statistiques du syst√®me d'acteurs...")
        
        all_actors = actor_manager.list_actors()
        total_cards = len(repo.list_cards())
        total_actors = len(all_actors)
        
        print(f"   üìä Total acteurs : {total_actors}")
        print(f"   üìä Total cartes : {total_cards}")
        print(f"   üìä Exports r√©ussis : {len(export_results)}")
        
        # Affichage d√©taill√©
        print(f"\n   üìã R√©partition des cartes par acteur :")
        for actor in all_actors:
            cards = actor_manager.get_actor_cards(actor['id'])
            print(f"      {actor['icon']} {actor['name']} : {len(cards)} cartes")
        
        # 7. Test des fonctionnalit√©s avanc√©es
        print("\n7Ô∏è‚É£ Test des fonctionnalit√©s avanc√©es...")
        
        # Test de liaison multiple (une carte √† plusieurs acteurs)
        if all_cards:
            test_card = all_cards[0]
            print(f"   üîó Test liaison multiple pour '{test_card.name}'...")
            
            # Lier √† plusieurs acteurs
            for actor_name in ["H√©ros Principal", "Marchand"]:
                actor_manager.link_card_to_actor(test_card.id, actor_ids[actor_name])
            
            # V√©rifier les liaisons
            linked_actors = actor_manager.get_card_actors(test_card.id)
            print(f"      ‚úÖ Carte li√©e √† {len(linked_actors)} acteurs")
        
        # Test de suppression d'acteur
        print(f"   üóëÔ∏è Test suppression d'acteur...")
        actor_manager.delete_actor(actor_ids["Marchand"])
        remaining_actors = actor_manager.list_actors()
        print(f"      ‚úÖ Acteurs restants : {len(remaining_actors)}")
        
        print(f"\nüéâ TOUS LES TESTS SONT PASS√âS !")
        print(f"   ‚úÖ Syst√®me d'acteurs enti√®rement fonctionnel")
        print(f"   ‚úÖ Migrations automatiques OK")
        print(f"   ‚úÖ Exports personnalis√©s OK")
        print(f"   ‚úÖ Liaisons multiples OK")
        print(f"   ‚úÖ Gestion d'acteurs OK")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur pendant les tests : {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # Nettoyer la base de test
        try:
            os.unlink(test_db)
        except:
            pass

def test_migration_legacy():
    """Test de la migration depuis l'ancien syst√®me."""
    print("\nüîÑ TEST DE MIGRATION DEPUIS L'ANCIEN SYST√àME")
    print("=" * 50)
    
    try:
        # Utiliser la vraie base de donn√©es pour tester la migration
        print("   üìÅ Utilisation de la base de donn√©es r√©elle...")
        actor_manager = ActorManager(DB_FILE)
        
        # Afficher les acteurs apr√®s migration
        actors = actor_manager.list_actors()
        print(f"   ‚úÖ {len(actors)} acteurs trouv√©s apr√®s migration :")
        
        for actor in actors:
            cards = actor_manager.get_actor_cards(actor['id'])
            print(f"      {actor['icon']} {actor['name']} : {len(cards)} cartes")
        
        # Test d'export r√©el
        if actors:
            print(f"\n   üì§ Test d'export avec les vraies donn√©es...")
            repo = CardRepo(DB_FILE)
            
            for actor in actors[:2]:  # Tester les 2 premiers acteurs
                cards = actor_manager.get_actor_cards(actor['id'])
                if cards:
                    filename = f"migration_test_{actor['name'].lower().replace(' ', '_')}.lua"
                    export_lua_for_actor(repo, actor_manager, actor['id'], filename)
                    print(f"      ‚úÖ Export {actor['name']} : {filename}")
                    
                    # Nettoyer
                    try:
                        os.remove(filename)
                    except:
                        pass
        
        print(f"   üéâ Migration test√©e avec succ√®s !")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur de migration : {e}")
        return False

if __name__ == "__main__":
    print("üé≠ SUITE DE TESTS COMPL√àTE DU SYST√àME D'ACTEURS")
    print("=" * 60)
    
    success1 = test_actors_system()
    success2 = test_migration_legacy()
    
    print(f"\n{'='*60}")
    if success1 and success2:
        print("üèÜ TOUS LES TESTS ONT R√âUSSI !")
        print("   Le syst√®me d'acteurs est pr√™t pour la production ! üöÄ")
    else:
        print("‚ùå Certains tests ont √©chou√©")
        print("   V√©rifiez les erreurs ci-dessus")
    
    print(f"\nüí° POUR UTILISER LE SYST√àME D'ACTEURS :")
    print(f"   1. Lancez l'application principale : python app_final.py")
    print(f"   2. Menu üé≠ Acteurs ‚Üí G√©rer les Acteurs")
    print(f"   3. Cr√©ez vos acteurs personnalis√©s")
    print(f"   4. Menu üé≠ Acteurs ‚Üí Export par Acteur")
    print(f"   5. Profitez des exports personnalis√©s ! üéØ")
    
    input("\nAppuyez sur Entr√©e pour fermer...")
