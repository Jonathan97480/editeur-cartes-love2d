#!/usr/bin/env python3
"""
Test de sc√©nario complet GitHub : Utilisateur qui clone le repo et lance l'app
"""

import os
import shutil
import sqlite3
import json
from datetime import datetime

def simulate_github_user_scenario():
    """
    Simule le sc√©nario complet d'un utilisateur GitHub :
    1. A d√©j√† une base de donn√©es locale avec chemins absolus
    2. Clone/pull la nouvelle version du repo
    3. Lance l'application
    """
    
    print("üé¨ SIMULATION SC√âNARIO UTILISATEUR GITHUB")
    print("=" * 50)
    
    # 1. √âTAPE : Utilisateur a d√©j√† une base de donn√©es
    print("üìÅ √âTAPE 1 : L'utilisateur a d√©j√† une base avec chemins absolus")
    
    # Cr√©er une base comme un vrai utilisateur en aurait une
    if os.path.exists("cartes_user.db"):
        os.remove("cartes_user.db")
    
    con = sqlite3.connect("cartes_user.db")
    cur = con.cursor()
    
    # Ancienne structure (sans original_img, sans syst√®me de migration)
    cur.execute("""
        CREATE TABLE cards (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            side TEXT NOT NULL CHECK(side IN ('joueur','ia')),
            name TEXT NOT NULL,
            img TEXT NOT NULL,
            description TEXT NOT NULL,
            powerblow INTEGER NOT NULL DEFAULT 0,
            rarity TEXT NOT NULL DEFAULT 'commun',
            types_json TEXT NOT NULL DEFAULT '[]',
            hero_json TEXT NOT NULL,
            enemy_json TEXT NOT NULL,
            action TEXT NOT NULL,
            action_param TEXT NOT NULL DEFAULT '',
            created_at TEXT NOT NULL,
            updated_at TEXT NOT NULL
        )
    """)
    
    # Donn√©es utilisateur typiques avec chemins absolus
    now = datetime.now().isoformat()
    hero_json = json.dumps({"heal": 10, "shield": 5, "Epine": 0, "attack": 20, "AttackReduction": 0, "shield_pass": 0, "bleeding": {"value": 0, "number_turns": 0}, "force_augmented": {"value": 0, "number_turns": 0}, "chancePassedTour": 0, "energyCostIncrease": 0, "energyCostDecrease": 0})
    enemy_json = json.dumps({"heal": 0, "shield": 0, "Epine": 5, "attack": 0, "AttackReduction": 10, "shield_pass": 0, "bleeding": {"value": 3, "number_turns": 2}, "force_augmented": {"value": 0, "number_turns": 0}, "chancePassedTour": 15, "energyCostIncrease": 2, "energyCostDecrease": 0})
    
    user_cards = [
        ("Ma Carte Dragon", "C:\\Users\\John\\Desktop\\images\\dragon_red.png", "Mon dragon personnel", "rare"),
        ("Carte Magicien", "C:\\Games\\Assets\\wizard_blue.jpg", "Magicien de glace", "legendaire"),
        ("Guerrier", "/home/user/Pictures/warrior.gif", "Guerrier redoutable", "commun"),
        ("√âlite Noire", "D:\\MyCards\\elite_dark.png", "Cr√©ature d'√©lite", "mythique"),
    ]
    
    for name, img_path, desc, rarity in user_cards:
        cur.execute("""
            INSERT INTO cards (side, name, img, description, powerblow, rarity, types_json, hero_json, enemy_json, action, action_param, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, ('joueur', name, img_path, desc, 15, rarity, '["Combat"]', hero_json, enemy_json, 'damage', '', now, now))
    
    con.commit()
    con.close()
    
    print(f"   ‚úÖ Base utilisateur cr√©√©e avec {len(user_cards)} cartes personnelles")
    
    # 2. √âTAPE : Utilisateur r√©cup√®re la nouvelle version depuis GitHub
    print(f"\nüì• √âTAPE 2 : L'utilisateur met √† jour son code depuis GitHub")
    print("   (Clone ou pull de la nouvelle version avec syst√®me de migration)")
    
    # 3. √âTAPE : Utilisateur lance l'application
    print(f"\nüöÄ √âTAPE 3 : L'utilisateur lance l'application")
    
    # Importer le nouveau syst√®me
    import sys
    sys.path.append('.')
    from lib.database import ensure_db, CardRepo
    
    # La fonction ensure_db va automatiquement d√©tecter et migrer
    try:
        ensure_db("cartes_user.db")
        print("   ‚úÖ Migration automatique r√©ussie !")
    except Exception as e:
        print(f"   ‚ùå ERREUR lors de la migration : {e}")
        return False
    
    # 4. √âTAPE : V√©rifier que tout fonctionne
    print(f"\nüîç √âTAPE 4 : V√©rification du bon fonctionnement")
    
    repo = CardRepo("cartes_user.db")
    cards = repo.list_cards()
    
    print(f"\nüìä R√©sultats apr√®s migration :")
    print(f"   ‚Ä¢ Nombre de cartes : {len(cards)}")
    
    all_good = True
    for card in cards:
        print(f"\n   üÉè {card.name} ({card.rarity})")
        print(f"     img: {card.img}")
        print(f"     original_img: {card.original_img}")
        
        # V√©rifications critiques
        if not card.original_img:
            print(f"     ‚ùå PROBL√àME: original_img vide !")
            all_good = False
        elif card.original_img == card.img:
            print(f"     ‚úÖ original_img correctement initialis√©")
        else:
            print(f"     ‚ö†Ô∏è  original_img diff√©rent de img")
        
        # V√©rifier que les donn√©es utilisateur sont pr√©serv√©es
        if not card.name or not card.description:
            print(f"     ‚ùå PROBL√àME: Donn√©es utilisateur perdues !")
            all_good = False
        else:
            print(f"     ‚úÖ Donn√©es pr√©serv√©es")
    
    # Test de modification d'une carte (le probl√®me original)
    print(f"\nüß™ √âTAPE 5 : Test changement de raret√© (probl√®me initial)")
    
    if cards:
        test_card = cards[0]
        original_rarity = test_card.rarity
        new_rarity = 'legendaire' if original_rarity != 'legendaire' else 'rare'
        
        print(f"   üîÑ Changement {test_card.name} : {original_rarity} ‚Üí {new_rarity}")
        
        test_card.rarity = new_rarity
        repo.update(test_card)
        
        # Recharger et v√©rifier
        updated_card = repo.get(test_card.id)
        if updated_card and updated_card.rarity == new_rarity:
            print(f"   ‚úÖ Raret√© mise √† jour avec succ√®s")
            print(f"   ‚úÖ original_img pr√©serv√© : {updated_card.original_img}")
        else:
            print(f"   ‚ùå PROBL√àME lors du changement de raret√©")
            all_good = False
    
    return all_good

def cleanup_test():
    """Nettoie les fichiers de test"""
    test_files = ["cartes_user.db", "cartes_user.db.backup.*"]
    for pattern in test_files:
        if '*' in pattern:
            import glob
            for file in glob.glob(pattern):
                try:
                    os.remove(file)
                except:
                    pass
        else:
            if os.path.exists(pattern):
                try:
                    os.remove(pattern)
                except:
                    pass

if __name__ == "__main__":
    try:
        success = simulate_github_user_scenario()
        
        print(f"\n" + "=" * 50)
        if success:
            print("üéâ SUCC√àS COMPLET !")
            print("‚úÖ L'utilisateur GitHub peut mettre √† jour sans probl√®me")
            print("‚úÖ Les donn√©es existantes sont pr√©serv√©es") 
            print("‚úÖ Les chemins absolus sont g√©r√©s correctement")
            print("‚úÖ Le syst√®me original_img fonctionne parfaitement")
            print("‚úÖ Le probl√®me de superposition de templates est r√©solu")
            print(f"\nüîí CONFIRMATION : Un utilisateur qui r√©cup√®re l'app depuis GitHub")
            print("   avec une base existante b√©n√©ficiera automatiquement de la")
            print("   migration et de la correction du bug des templates !")
        else:
            print("‚ùå √âCHEC : Des probl√®mes ont √©t√© d√©tect√©s")
    
    except Exception as e:
        print(f"üí• ERREUR CRITIQUE : {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        cleanup_test()
