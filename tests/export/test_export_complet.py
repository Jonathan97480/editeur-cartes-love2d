#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Comparaison et am√©lioration de l'export Lua
G√©n√®re un export complet avec taille de carte et toutes les donn√©es n√©cessaires
"""

from lib.database import CardRepo
from lib.config import DB_FILE
from lua_exporter_love2d import Love2DLuaExporter
import sqlite3

def analyze_current_export():
    """Analyse l'export actuel et g√©n√®re une version compl√®te"""
    print("üîç ANALYSE ET AM√âLIORATION EXPORT LUA")
    print("=" * 60)
    
    # 1. G√©n√©rer l'export actuel
    repo = CardRepo(DB_FILE)
    exporter = Love2DLuaExporter(repo)
    
    print("üìù Export avec les am√©liorations...")
    content = exporter.export_all_cards_love2d()
    
    # Sauvegarder l'export am√©lior√©
    filename = 'cards_joueur_complete.lua'
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ Export sauvegard√©: {filename}")
    print(f"üìä Taille: {len(content):,} caract√®res")
    
    # 2. Analyser le contenu
    print(f"\nüîç V√©rifications:")
    
    # V√©rifier les dimensions de carte
    if 'card = {' in content:
        print("   ‚úÖ Dimensions de carte incluses")
    else:
        print("   ‚ùå Dimensions de carte manquantes")
    
    # V√©rifier les sections de formatage
    if 'TextFormatting = {' in content:
        print("   ‚úÖ Section TextFormatting pr√©sente")
    else:
        print("   ‚ùå Section TextFormatting manquante")
    
    # Compter les sections
    card_count = content.count('--[[ CARTE')
    title_count = content.count('title = {')
    text_count = content.count('text = {')
    energy_count = content.count('energy = {')
    
    print(f"\nüìä Statistiques d√©taill√©es:")
    print(f"   Cartes export√©es: {card_count}")
    print(f"   Sections titre: {title_count}")
    print(f"   Sections texte: {text_count}")
    print(f"   Sections √©nergie: {energy_count}")
    
    # 3. Extraire un exemple complet
    print(f"\nüìã Exemple de carte compl√®te:")
    start = content.find('--[[ CARTE 1')
    if start != -1:
        end = content.find('--[[ CARTE 2', start)
        if end == -1:
            end = content.find('}\n\nreturn Cards', start)
        if end != -1:
            example = content[start:end].strip()
            # Afficher seulement les 1000 premiers caract√®res
            if len(example) > 1000:
                example = example[:1000] + "\n    ... (tronqu√©)"
            print(example)
    
    return content

def create_love2d_usage_example():
    """Cr√©e un exemple d'utilisation sous Love2D"""
    example = '''-- Exemple d'utilisation sous Love2D
local Cards = require('cards_joueur_complete')

function love.load()
    -- Charger une carte
    local card = Cards[1]
    
    -- Acc√©der aux dimensions de la carte
    local cardWidth = card.TextFormatting.card.width
    local cardHeight = card.TextFormatting.card.height
    local scale = card.TextFormatting.card.scale
    
    -- Position du titre
    local titleX = card.TextFormatting.title.x * scale
    local titleY = card.TextFormatting.title.y * scale
    local titleSize = card.TextFormatting.title.size * scale
    
    -- Position du texte
    local textX = card.TextFormatting.text.x * scale
    local textY = card.TextFormatting.text.y * scale
    local textWidth = card.TextFormatting.text.width * scale
    local textHeight = card.TextFormatting.text.height * scale
    
    -- Position de l'√©nergie
    local energyX = card.TextFormatting.energy.x * scale
    local energyY = card.TextFormatting.energy.y * scale
end

function love.draw()
    local card = Cards[1]
    local formatting = card.TextFormatting
    
    -- Dessiner le fond de carte (280x392 par d√©faut)
    love.graphics.setColor(1, 1, 1)
    love.graphics.rectangle("fill", 100, 100, 
        formatting.card.width * formatting.card.scale, 
        formatting.card.height * formatting.card.scale)
    
    -- Dessiner le titre
    love.graphics.setColor(0, 0, 0) -- Couleur du titre
    love.graphics.setFont(love.graphics.newFont(formatting.title.size))
    love.graphics.print(card.name, 
        100 + formatting.title.x, 
        100 + formatting.title.y)
    
    -- Dessiner la description
    love.graphics.setFont(love.graphics.newFont(formatting.text.size))
    love.graphics.printf(card.Description,
        100 + formatting.text.x,
        100 + formatting.text.y,
        formatting.text.width,
        formatting.text.align)
    
    -- Dessiner le co√ªt d'√©nergie
    love.graphics.setFont(love.graphics.newFont(formatting.energy.size))
    love.graphics.print(tostring(card.PowerBlow),
        100 + formatting.energy.x,
        100 + formatting.energy.y)
end'''
    
    with open('love2d_usage_example.lua', 'w', encoding='utf-8') as f:
        f.write(example)
    
    print("üìñ Exemple d'utilisation Love2D cr√©√©: love2d_usage_example.lua")

def verify_database_formatting():
    """V√©rifie que toutes les cartes ont des donn√©es de formatage"""
    print(f"\nüîç V√âRIFICATION BASE DE DONN√âES")
    print("=" * 40)
    
    # V√©rifier les donn√©es de formatage dans la base
    import sqlite3
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute('''
        SELECT id, name, 
               title_x, title_y, title_font, title_size, title_color,
               text_x, text_y, text_width, text_height, text_font, text_size, text_color,
               energy_x, energy_y, energy_font, energy_size, energy_color
        FROM cards
    ''')
    
    cards_data = cursor.fetchall()
    conn.close()
    
    print(f"üìä Cartes analys√©es: {len(cards_data)}")
    
    complete_count = 0
    for card in cards_data:
        card_id, name = card[0], card[1]
        formatting_data = card[2:]
        
        # V√©rifier si toutes les donn√©es de formatage sont pr√©sentes
        has_complete_formatting = all(x is not None for x in formatting_data)
        
        if has_complete_formatting:
            complete_count += 1
            status = "‚úÖ"
        else:
            status = "‚ö†Ô∏è"
        
        print(f"   {status} Carte {card_id}: {name}")
        if not has_complete_formatting:
            missing = []
            fields = ['title_x', 'title_y', 'title_font', 'title_size', 'title_color',
                     'text_x', 'text_y', 'text_width', 'text_height', 'text_font', 'text_size', 'text_color',
                     'energy_x', 'energy_y', 'energy_font', 'energy_size', 'energy_color']
            for i, value in enumerate(formatting_data):
                if value is None:
                    missing.append(fields[i])
            print(f"      Manquant: {', '.join(missing)}")
    
    print(f"\nüìà R√©sum√©: {complete_count}/{len(cards_data)} cartes avec formatage complet")
    
    return complete_count == len(cards_data)

if __name__ == "__main__":
    # 1. V√©rifier la base de donn√©es
    db_complete = verify_database_formatting()
    
    # 2. G√©n√©rer l'export am√©lior√©
    content = analyze_current_export()
    
    # 3. Cr√©er l'exemple d'utilisation
    create_love2d_usage_example()
    
    print(f"\nüéØ R√âSULTATS FINAUX:")
    print(f"   üìä Base de donn√©es: {'‚úÖ Compl√®te' if db_complete else '‚ö†Ô∏è Incompl√®te'}")
    print(f"   üìù Export Lua: ‚úÖ G√©n√©r√© avec dimensions de carte")
    print(f"   üìñ Exemple Love2D: ‚úÖ Cr√©√©")
    print(f"   üéÆ Pr√™t pour int√©gration Love2D: {'‚úÖ Oui' if db_complete else '‚ö†Ô∏è Apr√®s correction BDD'}")
