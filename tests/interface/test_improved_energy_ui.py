#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de l'interface am√©lior√©e pour le positionnement de l'√©nergie
"""

import tkinter as tk
from lib.database import CardRepo
from lib.config import DB_FILE
from lib.text_formatting_editor import TextFormattingEditor

def test_improved_energy_interface():
    """Test de l'interface am√©lior√©e d'√©nergie"""
    print("üéØ TEST INTERFACE AM√âLIOR√âE - POSITIONNEMENT √âNERGIE")
    print("=" * 70)
    
    # Cr√©er une fen√™tre de test
    root = tk.Tk()
    root.title("Test Interface √ânergie Am√©lior√©e")
    root.withdraw()  # Cacher la fen√™tre principale
    
    # Cr√©er le repo et r√©cup√©rer une carte
    repo = CardRepo(DB_FILE)
    cards = repo.list_cards()
    
    if cards:
        card = cards[0]  # Prendre la premi√®re carte
        print(f"üìù Test avec la carte: {card.name}")
        print(f"   PowerBlow (√©nergie): {card.powerblow}")
        print(f"   Position initiale: ({card.energy_x}, {card.energy_y})")
        
        # Cr√©er les donn√©es pour l'√©diteur
        card_data = {
            'nom': card.name,
            'description': card.description,
            'img': card.img,
            'powerblow': card.powerblow,
            'title_x': card.title_x,
            'title_y': card.title_y,
            'title_font': card.title_font,
            'title_size': card.title_size,
            'title_color': card.title_color,
            'text_x': card.text_x,
            'text_y': card.text_y,
            'text_width': card.text_width,
            'text_height': card.text_height,
            'text_font': card.text_font,
            'text_size': card.text_size,
            'text_color': card.text_color,
            'text_align': card.text_align,
            'line_spacing': card.line_spacing,
            'text_wrap': card.text_wrap,
            'energy_x': card.energy_x,
            'energy_y': card.energy_y,
            'energy_font': card.energy_font,
            'energy_size': card.energy_size,
            'energy_color': card.energy_color
        }
        
        try:
            # Cr√©er une classe repo personnalis√©e pour le test
            class TestRepo:
                def save_card(self, card_data):
                    print(f"üíæ Sauvegarde simul√©e:")
                    print(f"   Position √©nergie finale: ({card_data.energy_x}, {card_data.energy_y})")
                    print(f"   Style: {card_data.energy_font} {card_data.energy_size}px {card_data.energy_color}")
                    return True
            
            test_repo = TestRepo()
            
            # Cr√©er l'√©diteur
            editor = TextFormattingEditor(
                parent=root, 
                card_id=card.id, 
                card_data=card_data, 
                repo=test_repo
            )
            
            print(f"‚úÖ Interface am√©lior√©e cr√©√©e avec succ√®s!")
            print(f"\nüéØ NOUVELLES FONCTIONNALIT√âS:")
            print(f"   üìè Curseurs X et Y pleine largeur (plus pr√©cis)")
            print(f"   üìç Boutons de pr√©r√©glages pour positions courantes:")
            print(f"      - Haut Gauche, Centre, Droit")
            print(f"      - Milieu Gauche, Centre, Droit")
            print(f"   üëÅÔ∏è Aper√ßu visuel en temps r√©el")
            print(f"   üíæ Sauvegarde automatique des param√®tres")
            
            print(f"\nüéÆ TESTEZ LES FONCTIONNALIT√âS:")
            print(f"   1. Utilisez les curseurs X/Y pour ajuster pr√©cis√©ment")
            print(f"   2. Cliquez sur les boutons de pr√©r√©glages")
            print(f"   3. Observez l'aper√ßu en temps r√©el")
            print(f"   4. Modifiez la couleur et la taille")
            print(f"   5. Sauvegardez pour valider")
            
            # Lancer l'interface
            root.mainloop()
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation de l'√©diteur: {e}")
            import traceback
            traceback.print_exc()
            root.destroy()
    else:
        print("‚ùå Aucune carte trouv√©e pour le test")
        root.destroy()

if __name__ == "__main__":
    test_improved_energy_interface()
