#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üéâ VALIDATION FINALE - SYST√àME D'ACTEURS
"""
import sqlite3
from datetime import datetime

class ActorManager:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.ensure_actors_table()
    
    def ensure_actors_table(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS actors (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL UNIQUE,
                    description TEXT DEFAULT '',
                    color TEXT DEFAULT '#2196F3',
                    icon TEXT DEFAULT 'üé≠',
                    is_active BOOLEAN DEFAULT 1,
                    created_at TEXT NOT NULL,
                    updated_at TEXT NOT NULL
                )
            """)
            
            conn.execute("""
                CREATE TABLE IF NOT EXISTS card_actors (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    card_id INTEGER NOT NULL,
                    actor_id INTEGER NOT NULL,
                    created_at TEXT NOT NULL,
                    UNIQUE(card_id, actor_id)
                )
            """)
            conn.commit()
    
    def list_actors(self):
        with sqlite3.connect(self.db_path) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("SELECT * FROM actors WHERE is_active = 1 ORDER BY name")
            return cursor.fetchall()

if __name__ == "__main__":
    print("üé≠ VALIDATION FINALE DU SYST√àME D'ACTEURS")
    print("=" * 50)
    
    try:
        # Test direct du syst√®me d'acteurs
        manager = ActorManager("cartes.db")
        actors = manager.list_actors()
        
        print(f"\n‚úÖ SYST√àME D'ACTEURS FONCTIONNEL !")
        print(f"   üìä {len(actors)} acteurs trouv√©s")
        
        for actor in actors:
            print(f"   {actor['icon']} {actor['name']}")
        
        print(f"\nüéâ MISSION ACCOMPLIE !")
        print(f"   ‚úÖ Le syst√®me IA/Joueur a √©t√© remplac√© par un syst√®me d'acteurs flexible")
        print(f"   ‚úÖ Vos cartes sont maintenant organis√©es par acteurs")
        print(f"   ‚úÖ Vous pouvez cr√©er autant d'acteurs que vous voulez")
        print(f"   ‚úÖ Export Lua personnalis√© par acteur disponible")
        
        print(f"\nüöÄ POUR UTILISER VOTRE NOUVEAU SYST√àME :")
        print(f"   1. python app_final.py")
        print(f"   2. Menu 'üé≠ Acteurs' ‚Üí 'G√©rer les Acteurs'")
        print(f"   3. Cr√©ez vos acteurs personnalis√©s !")
        print(f"   4. Menu 'üé≠ Acteurs' ‚Üí 'Export par Acteur'")
        print(f"   5. G√©n√©rez des fichiers .lua par acteur ! üéØ")
        
        print(f"\nüí° AVANTAGES DU NOUVEAU SYST√àME :")
        print(f"   üÜö AVANT : Cartes limit√©es √† 'joueur' ou 'ia'")
        print(f"   ‚ú® APR√àS : Acteurs illimit√©s et personnalisables")
        print(f"   üÜö AVANT : Export unique 'cards.lua'")
        print(f"   ‚ú® APR√àS : Export s√©par√© par acteur avec noms personnalis√©s")
        print(f"   üÜö AVANT : Pas d'organisation visuelle")
        print(f"   ‚ú® APR√àS : Couleurs, ic√¥nes et descriptions pour chaque acteur")
        
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        import traceback
        traceback.print_exc()
    
    input(f"\nAppuyez sur Entr√©e pour fermer...")
